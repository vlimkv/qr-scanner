import { createClient } from '@supabase/supabase-js';

const supabase = createClient(
  process.env.SUPABASE_URL,
  process.env.SUPABASE_KEY
);

export default async function handler(req, res) {
  if (req.method !== 'POST') {
    return res.status(405).json({ message: '–ú–µ—Ç–æ–¥ –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è' });
  }

  const { token } = req.body;

  if (!token) {
    return res.status(400).json({ message: '‚ùå –¢–æ–∫–µ–Ω –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç' });
  }

  try {
    const { data, error } = await supabase
      .from('participants')
      .select('id, name, entered')
      .eq('qr_token', token)
      .single();

    if (error || !data) {
      return res.status(404).json({ message: '‚ùå –£—á–∞—Å—Ç–Ω–∏–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω' });
    }

    if (data.entered) {
      return res.status(200).json({
        message: `‚ö†Ô∏è –£–∂–µ –∑–∞—Ö–æ–¥–∏–ª: ${data.name}`,
        name: data.name // üëà –≠–¢–û –¢–û–ñ–ï –î–û–ë–ê–í–¨!
      });
    }

    const { error: updateError } = await supabase
      .from('participants')
      .update({ entered: true })
      .eq('id', data.id);

    if (updateError) {
      return res.status(500).json({ message: 'üö´ –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏' });
    }

    return res.status(200).json({
      message: `‚úÖ –í—Ö–æ–¥ —Ä–∞–∑—Ä–µ—à—ë–Ω: ${data.name}`,
      name: data.name // üëà –≠–¢–û –î–û–ë–ê–í–¨!
    });
  } catch (err) {
    console.error('‚ùå Internal error:', err);
    return res.status(500).json({ message: 'üö´ –í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' });
  }
}